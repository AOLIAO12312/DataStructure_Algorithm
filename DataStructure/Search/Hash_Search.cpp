#include<iostream>
using namespace std;

//Hash Table散列表 数据关键字和存储地址相关
//Addr = Hash(key)

//不同关键字通过散列函数映射到同一个值 称为同义词（冲突）

//解决冲突
//1.链表（拉链法）
//2.开放定址法；H = (H(key) + di) % m
//  （1）线性探测法：第i次冲突会直接使用冲突哈希函数（向后填充） 直到填满哈希表
//       删除操作不能简单进行删除 需要进行标记 否则查找会出现问题
//      d0 = 0，d1 = 1,d2 = 2...
//  （2）平方探测法：d0 = 0, d1 = 1,d2 = -1,d3 = 4,d4 = -4,d5 = 9...
//       平方反复振荡 注意：m必须可以是表示为4j + 3的质数 才能探测到所有位置
//  （3）随机序列法：di = 随机序列
//3.再散列法：多准备几个哈希函数 多次使用hash函数直到不冲突

//常见散列函数

//1.除留余数法
//H(key) = key % p
//散列表表长为m，p为小于等于且最接近m的“质数”（让冲突尽可能少）

//2.直接定址法
//H(key) = key 或 H(key) = a * key + b
//适合关键字分布基本连续的情况（学号）

//3.数字分析法

//4.平方取中法
//算key的平方 取中间几位 1310^2 = 1716100 取716


int main() {
    return 0;
}